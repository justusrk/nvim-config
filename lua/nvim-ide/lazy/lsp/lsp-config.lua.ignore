-- Language Server Protocol -- code feat and language support
return {
    {
        "L3MON4D3/LuaSnip", 
         version = "v2.*", -- Replace <CurrentMajor> by the latest released major (first number of latest release)

         -- install jsregexp (optional!).
         build = "make install_jsregexp",
 
         dependencies = { 
             "saadparwaiz1/cmp_luasnip",
             "rafamadriz/friendly-snippets" 
         },
        config = function() 
            require("luasnip.loaders.from_vscode").lazy_load()
            local ls = require("luasnip")
            ls.filetype_extend("javascript", { "jsdoc" })

            --- TODO: What is expand?
            vim.keymap.set({"i"}, "<C-s>e", function() ls.expand() end, {silent = true})

            vim.keymap.set({"i", "s"}, "<C-s>;", function() ls.jump(1) end, {silent = true})
            vim.keymap.set({"i", "s"}, "<C-s>,", function() ls.jump(-1) end, {silent = true})

            vim.keymap.set({"i", "s"}, "<C-E>", function()
                if ls.choice_active() then
                    ls.change_choice(1)
                end
            end, {silent = true})

        end

        
    },
    {

        "neovim/nvim-lspconfig",

        dependencies = {
            "williamboman/mason.nvim", 
            "williamboman/mason-lspconfig.nvim", 
            "hrsh7th/cmp-nvim-lsp",
            "hrsh7th/cmp-buffer", 
            "hrsh7th/cmp-path", 
            "hrsh7th/cmp-cmdline", 
            "hrsh7th/nvim-cmp",
            "L3MON4D3/LuaSnip", 
            "saadparwaiz1/cmp_luasnip", 
            "j-hui/fidget.nvim", 
            "danymat/neogen"},

        config = function()
            local cmp = require('cmp')
            local cmp_lsp = require("cmp_nvim_lsp")
            local capabilities = vim.tbl_deep_extend("force", {}, vim.lsp.protocol.make_client_capabilities(),
                cmp_lsp.default_capabilities())

            require("fidget").setup({})
            require("mason").setup()
            require("mason-lspconfig").setup({
                ensure_installed = {"lua_ls", "eslint", "tsserver", "rust_analyzer"},
                handlers = {
                    function(server_name) -- default handler (optional)

                        require("lspconfig")[server_name].setup {
                            capabilities = capabilities
                        }
                    end,

                    ["lua_ls"] = function()
                        local lspconfig = require("lspconfig")
                        lspconfig.lua_ls.setup {
                            capabilities = capabilities,
                            settings = {
                                Lua = {
                                    runtime = {
                                        version = "Lua 5.1"
                                    },
                                    diagnostics = {
                                        globals = {"vim", "it", "describe", "before_each", "after_each"}
                                    }
                                }
                            }
                        }
                    end
                }
            })

            local cmp_select = {
                behavior = cmp.SelectBehavior.Select
            }
            local neogen = require('neogen')
            local luasnip = require("luasnip")
            cmp.setup({
                snippet = {
                    expand = function(args)
                        require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
                    end
                },
                mapping = cmp.mapping.preset.insert({
                    ['<C-p>'] = cmp.mapping.select_prev_item(cmp_select),
                    ['<C-n>'] = cmp.mapping.select_next_item(cmp_select),
                    ['<C-y>'] = cmp.mapping.confirm({
                        select = true
                    }),
                    ['<C-Space>'] = cmp.mapping.complete(), -- code complete
                    ["<C-.>"] = cmp.mapping(function(fallback)
                        if luasnip and luasnip.expand_or_jumpable() then
                            luasnip.expand_or_jump()
                        else
                            fallback()
                        end
                    end, {"i", "s"}),
                    ["<C-,>"] = cmp.mapping(function(fallback)
                        if luasnip and luasnip.jumpable(-1) then
                            luasnip.jump(-1)
                        else
                            fallback()
                        end
                    end, {"i", "s"})
                }),
                sources = cmp.config.sources({
                    {
                        name = 'nvim_lsp' -- lsp completions
                    }, 
                    {
                        name = 'luasnip' -- For luasnip users.
                    } 
                }, {{
                    name = 'buffer'
                }})
            })

            vim.diagnostic.config({
                -- update_in_insert = true,
                float = {
                    focusable = false,
                    style = "minimal",
                    border = "rounded",
                    source = "always",
                    header = "",
                    prefix = ""
                }
            })
        end
    }
}
